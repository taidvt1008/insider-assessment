// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/messages/failed": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messages"
                ],
                "summary": "Get list of failed messages (with pagination)",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of messages to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Number of messages to skip",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SentMessagesResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/messages/sent": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messages"
                ],
                "summary": "Get list of sent messages (with pagination)",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of messages to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Number of messages to skip",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SentMessagesResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/scheduler/start": {
            "post": {
                "description": "Starts the background scheduler that periodically sends pending messages every configured interval.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Scheduler"
                ],
                "summary": "Start automatic message sending",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SchedulerActionResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/scheduler/stop": {
            "post": {
                "description": "Stops the background scheduler. No further messages will be sent until restarted.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Scheduler"
                ],
                "summary": "Stop automatic message sending",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SchedulerActionResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Check the health status of the service including database connectivity and scheduler status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Health check endpoint",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.HealthResponse"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/model.HealthResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Internal server error"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                },
                "time": {
                    "type": "string",
                    "example": "2025-10-19T09:00:00Z"
                }
            }
        },
        "model.HealthResponse": {
            "type": "object",
            "properties": {
                "services": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "database": "healthy",
                        "redis": "healthy",
                        "scheduler": "running"
                    }
                },
                "status": {
                    "type": "string",
                    "example": "healthy"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2025-10-19T09:00:00Z"
                }
            }
        },
        "model.Pagination": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 2
                },
                "has_more": {
                    "type": "boolean",
                    "example": true
                },
                "limit": {
                    "type": "integer",
                    "example": 10
                },
                "offset": {
                    "type": "integer",
                    "example": 0
                },
                "total": {
                    "type": "integer",
                    "example": 5
                }
            }
        },
        "model.SchedulerActionResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Scheduler started successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                },
                "time": {
                    "type": "string",
                    "example": "2025-10-19T08:10:00Z"
                }
            }
        },
        "model.SentMessageResponseData": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string",
                    "example": "Hello from Insider!"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "phone_number": {
                    "type": "string",
                    "example": "+84901234567"
                },
                "sent_at": {
                    "type": "string",
                    "example": "2025-10-19T07:41:45Z"
                },
                "status": {
                    "type": "string",
                    "example": "sent"
                }
            }
        },
        "model.SentMessagesResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.SentMessageResponseData"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/model.Pagination"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Insider Message Sender API",
	Description:      "Golang-based automatic message sending service",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
